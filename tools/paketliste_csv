#!/bin/bash
#===========================================
#         FILE: paketliste_csv
#        USAGE: tools/paketliste_csv - ( ausführen im live-build-Verzeichnis )
#  DESCRIPTION: erstellen der Paketlisten aus der Doku Paketliste
#        
#      VERSION: 0.0.4
#      OPTIONS: PAKETLISTE-1 PAKETLISTE-2 .... oder .../path/*  # ohne Option (Default) $1 = FSFW_UNI_Stick_-_Paketliste.md
#        NOTES: für - open-infrastructure-system-* (live-build) Debian jessie / Debian stretch / Debian buster
#               - es können mehrere PAKETLISTEN kombiniert werden.
#
#       AUTHOR: Gerd Göhler, gerdg-dd@gmx.de
#      CREATED: 2018-08-20
#     REVISION: 2019-06-12
#       Lizenz: CC BY-NC-SA 3.0 DE - https://creativecommons.org/licenses/by-nc-sa/3.0/de/#
#               https://creativecommons.org/licenses/by-nc-sa/3.0/de/legalcode
#==========================================

DATUM=$(date +%Y-%m-%d)

PAKETLISTE=$@
REPO_ROOT=$(git rev-parse --show-toplevel)
DEFAULT_PAKETLISTE=$(readlink ${REPO_ROOT}/variants/default/paketlisten/default)
#PAKETPATH=./config/package-lists
PAKETLISTE_CSV=${REPO_ROOT}/images/${DATUM}_paketliste.csv


echo "Packetliste.csv wirden erstellt."

echo "Packetliste erstellt ${DATUM}" > ${PAKETLISTE_CSV}
echo " ; Auswahl ; Paketname ; Inst.gr ; Description ; Kurzbeschreibung" >> ${PAKETLISTE_CSV}



DOWNLOAD="wget -nv -T10 --no-http-keep-alive --show-progress -c"

######################
# Funktion: überprüfe ob Verzeichnis ${PAKETPATH} existiert
# 

#test_paketpath() {
#    if [[ -d ${PAKETPATH} ]]; then
#        echo " Verzeichnis - ${PAKETPATH##*/} - ist vorhanden"
#
#        else
#        echo " Verzeichnis - ${PAKETPATH##*/} - wird erstellt"
#        mkdir ${PAKETPATH}
#    fi
#}

####################
# Funktion: überprüfe ob ${PAKETLISTE} vorhanden ist
#

test_datei() {
    if [[ ! -f ${PAKETLISTE} ]]; then
        echo " ${PAKETLISTE} existiert nicht "
        exit 0
    fi
}

####################
# Funktion: alte Packetlisten löschen 
#

#del_paketlist() {
#    if [[ $(ls -A ${PAKETPATH}) ]]; then
#        echo " Alte Paketlisten werden gelöscht "
#        rm -v ${PAKETPATH}/*.list.*
#    else
#        echo " Es gibt keine Packetlisten "
#    fi
#}

####################
# Funktion paketliste.csv
#
# Liste für Controlle und Auswertungen 
#
# TODO: sudo apt-cache gencaches - noch einbauen
#	apt depends noch erstelln
#
#
# dctrl-tools müssen installiert sein für grep-status , grep-dctrl
# grep-status -n -d -s Package,Installed-Size -F Package -X ${line%%"  "*}   # werte nicht für alle Pakete verfügbar ??
#
# 

csv_paketliste() {

#InSize=$(apt show ${line##*"  "} | grep -e "Installed-Size:" )		# funktioniert derzeit nicht sauber
InSize=$(apt-cache show ${line##*"  "} | egrep "Installed-Size:" )
Desc=$(LANG=C apt-cache show ${line##*"  "} | egrep "Description-en:" )
Descde=$(apt-cache show ${line##*"  "} | egrep "Description-de:" )
Auswahl=${line%%"  "*}

echo " ; $(echo ${Auswahl##-}) ; $(echo ${line##*"  "}) ; $(echo ${InSize##Installed-Size:}) ; $(echo ${Desc##Description-en:}) ; $(echo ${Descde##Description-de:})" >> ${PAKETLISTE_CSV}

}

####################
# Funktion Paketliste.csv generieren
#

create_paketlist() {

while read line 
do 
    line=${line%%"  -"*}

    case "${line%%"  "*}" in
    "##")
        liste=${line##*"  "}.list.chroot
        listeb=${line##*"  "}.list.binary
#        if [[ -w ${PAKETPATH}/${liste// /_} ]]; then
#            echo " ${PAKETPATH}/${liste// /_} wird erweitert "
#        else
#            echo "#  Paketliste erstellt - ${DATUM}" > ${PAKETPATH}/${liste// /_}
#            echo >> ${PAKETPATH}/${liste// /_}
            
            # sicherstellen, dass mindestens ein Kommentar in der Liste steht, sonst verschluckt sich eins der weiteren skripte von lb build
            # echo "# dummy" >> ${PAKETPATH}/${liste// /_}
#            
#            echo "Paketliste -- ${PAKETPATH}/${liste// /_} -- wurde angelegt "
#            echo "# " >> ${PAKETPATH}/${liste// /_}
#        fi
    ;;
    "- ###")
        echo "### ${line##*"  "}" # >> ${PAKETPATH}/${liste// /_}
    ;;
    "- ### :o:")
        echo "### ${line##*"  "}" # >> ${PAKETPATH}/${liste// /_}
    ;;
    "- ### :x:")
        PAKETLISTE="$(dirname "${PAKETLISTE}")/${line##*"  "}.md"
        test_datei
        echo " ${PAKETLISTE} wird eingefügt "
#        create_paketlist
        echo " ${PAKETLISTE} wurde eingefügt "
    ;;
    "- :x:")
        echo ${line##*"  "} # >> ${PAKETPATH}/${liste// /_}
	csv_paketliste
    ;;
    "- :+1:")
        echo "# ${line##*"  "}" # >> ${PAKETPATH}/${liste// /_}
	csv_paketliste
    ;;
    "- :+1: :x:")
        echo "## ${line##*"  "} wird alternativ mittels extra-installation über packages.chroot installiert" # >> ${PAKETPATH}/${liste// /_}
	line=${line##*](}
        echo "## --extra--installation -->  ${line//)/ }" # >> ${PAKETPATH}/${liste// /_}
    ;;
    "- :o:")
        echo "## ${line##*"  "}" # >> ${PAKETPATH}/${liste// /_}
	csv_paketliste
    ;;
    "- [x]")
        # Kommentarzeilen mit beginnent mit "#" in *.list.binary benötigen patch in 
        # --> /usr/lib/live/build/binary_packages-list    -- Zeile 101 -- fehlt         " | grep -v '^#' >> "
        #
        #101                    Expand_packagelist "${LIST}" "config/package-lists" | grep -v '^#' >> chroot/root/"$(basename ${LIST})"
        #
#       if [[ ! -f ${PAKETPATH}/${listeb// /_} ]]; then 
#               echo "##  Paketliste erstellt - ${DATUM}" > ${PAKETPATH}/${listeb// /_}
#               echo "" >> ${PAKETPATH}/${listeb// /_}
#       fi

#        if [[ -w ${PAKETPATH}/${listeb// /_} ]]; then
#            echo " ${PAKETPATH}/${listeb// /_} wird erweitert "
#        else
#            echo "#  Paketliste erstellt - ${DATUM}" > ${PAKETPATH}/${listeb// /_}
#            echo >> ${PAKETPATH}/${listeb// /_}
#            
            # sicherstellen, dass mindestens ein Kommentar in der Liste steht, sonst verschluckt sich eins der weiteren skripte von lb build
            # echo "# dummy" >> ${PAKETPATH}/${liste// /_}
            
#            echo "Paketliste -- ${PAKETPATH}/${listeb// /_} -- wurde angelegt "
#            echo "# " >> ${PAKETPATH}/${listeb// /_}
#        fi

        echo ${line##*"  "} # >> ${PAKETPATH}/${listeb// /_}
        echo "Paketliste -- ${PAKETPATH}/${listeb// /_} -- wurde angelegt "
	csv_paketliste
    ;;
#    "- [ ]")
#       if [[ ! -f ${PAKETPATH}/${listeb// /_} ]]; then 
#               echo "##  Paketliste erstellt - ${DATUM}" > ${PAKETPATH}/${listeb// /_}
#               echo "" >> ${PAKETPATH}/${listeb// /_}
#       fi
#       echo "# ${line##*"  "}" >> ${PAKETPATH}/${listeb// /_}
#    ;;
    *)
#       echo " Unbekannt "
    ;;  
    esac

    done < ${PAKETLISTE}
    echo "Packetlisten erstellen beendet. "
}

###################
# Hauptfunktion
#

# test_paketpath

# teste ob paketliste ARGUMENTE hat, wenn nein lösche *.list.* und verwende die default Liste (FSFW_UNI_Stick_-_Paketliste.md) ,

if    [[ -z "$@" ]]; then
        # wenn ja --> Paketlisten einlesen
        PAKETLISTE=${DEFAULT_PAKETLISTE}
        echo " ${PAKETLISTE} wurde ausgewählt "
        # del_paketlist
        create_paketlist
    else
        # Sollen vorhandene Paketlisten gelöscht werden ?
        echo " $@ wurde ausgewählt" 
#                echo " Es sollen neue Packetlisten generiert werden ! "
#                echo " Möchten Sie alle vorhandenen Paketlisten vorher löschen ? "
#                echo " Geben sie >> y << ein und die Eingabetaste. "
#                echo " "
#                echo " Die vorhanden Pakeklisten erweitern - mit jeder anderen Taste. "
#                read NEUE_LISTEN
#                if [ "$NEUE_LISTEN" == 'y' ]; then
#                    echo " Listen löschen "
#                    # del_paketlist
#                fi
        for paketliste in $@
            do
            PAKETLISTE=${paketliste}
            # überprüfe ob Paketliste existiert, sonst Fehlermeldung
            test_datei
            # Paketlisten generieren
            create_paketlist
        done

fi


echo "##############################"

echo "Paketlisten-csv-Erstellung fertig."



