#!/bin/bash
#===========================================
#         FILE: paketliste
#        USAGE: auto/paketliste - ( ausführen im live-build-Verzeichnis )
#  DESCRIPTION: erstellen der Paketlisten aus der Doku Paketliste
#        
#      VERSION: 0.0.4
#      OPTIONS: PAKETLISTE-1 PAKETLISTE-2 ....  # ohne Option (Default) $1 = FSFW_UNI_Stick_-_Paketliste.md
#        NOTES: für - live-build - Debian jessie / Debian stretch
#               - es können mehrere PAKETLISTEN kombiniert werden.
#
#       AUTHOR: Gerd Göhler, gerdg-dd@gmx.de
#      CREATED: 2016-08-22
#     REVISION: 2016-10-18
#       Lizenz: CC BY-NC-SA 3.0 DE - https://creativecommons.org/licenses/by-nc-sa/3.0/de/#
#               https://creativecommons.org/licenses/by-nc-sa/3.0/de/legalcode
#==========================================

PAKETLISTE=$@
DEFAULT_PAKETLISTE=../doc/FSFW-Uni-Stick_-_Paketliste.md
PAKETPATH=./config/package-lists

DATUM=$(date +%Y-%m-%d)

DOWNLOAD="wget -nv -T10 --no-http-keep-alive --show-progress -c"

######################
# Funktion: überprüfe ob Verzeichnis ${PAKETPATH} existiert
# 

test_paketpath() {
    if [[ -d ${PAKETPATH} ]]; then
        echo " Verzeichnis - ${PAKETPATH##*/} - ist vorhanden"

        else
        echo " Verzeichnis - ${PAKETPATH##*/} - wird erstellt"
        mkdir ${PAKETPATH}
    fi
}

####################
# Funktion: überprüfe ob ${PAKETLISTE} vorhanden ist
#

test_datei() {
    if [[ ! -f ${PAKETLISTE} ]]; then
        echo " ${PAKETLISTE} existiert nicht "
        exit 0
    fi
}

####################
# Funktion: alte Packetlisten löschen 
#

del_paketlist() {
    if [[ $(ls -A ${PAKETPATH}) ]]; then
        echo " Alte Paketlisten werden gelöscht "
        rm -v ${PAKETPATH}/*.list.*
    else
        echo " Es gibt keine Packetlisten "
    fi
}

####################
# Funktion Paketlisten generieren
#

create_paketlist() { echo "Packetlisten werden erstellt."

while read line 
do 
    line=${line%%"  -"*}

    case "${line%%"  "*}" in
    "##")
        liste=${line##*"  "}.list.chroot
        listeb=${line##*"  "}.list.binary
        if [[ -w ${PAKETPATH}/${liste// /_} ]]; then
            echo " ${PAKETPATH}/${liste// /_} wird erweitert "
        else
            echo "#  Paketliste erstellt - ${DATUM}" > ${PAKETPATH}/${liste// /_}
            echo >> ${PAKETPATH}/${liste// /_}
            
            # sicherstellen, dass mindestens ein Kommentar in der Liste steht, sonst verschluckt sich eins der weiteren skripte von lb build
            # echo "# dummy" >> ${PAKETPATH}/${liste// /_}
            
            echo "Paketliste -- ${PAKETPATH}/${liste// /_} -- wurde angelegt "
            echo "" >> ${PAKETPATH}/${liste// /_}
        fi
    ;;
    "- ###")
        echo "### ${line##*"  "}" >> ${PAKETPATH}/${liste// /_}
    ;;
    "- ### :o:")
        echo "### ${line##*"  "}" >> ${PAKETPATH}/${liste// /_}
    ;;
    "- ### :x:")
        PAKETLISTE="$(dirname "${PAKETLISTE}")/${line##*"  "}.md"
        test_datei
        echo " ${PAKETLISTE} wird eingefügt "
        create_paketlist
        echo " ${PAKETLISTE} wurde eingefügt "
    ;;
    "- :x:")
        echo ${line##*"  "} >> ${PAKETPATH}/${liste// /_}
    ;;
    "- :+1:")
        echo "# ${line##*"  "}" >> ${PAKETPATH}/${liste// /_}
    ;;
    "- :+1: :x:")
        echo "## ${line##*"  "} wird alternativ über packages.chroot installiert" >> ${PAKETPATH}/${liste// /_}
    ;;
    "- :o:")
        echo "## ${line##*"  "}" >> ${PAKETPATH}/${liste// /_}
    ;;
    "- [x]")
        # Kommentarzeilen mit beginnent mit "#" in *.list.binary benötigen patch in 
        # --> /usr/lib/live/build/binary_packages-list    -- Zeile 101 -- fehlt         " | grep -v '^#' >> "
        #
        #101                    Expand_packagelist "${LIST}" "config/package-lists" | grep -v '^#' >> chroot/root/"$(basename ${LIST})"
        #
#       if [[ ! -f ${PAKETPATH}/${listeb// /_} ]]; then 
#               echo "##  Paketliste erstellt - ${DATUM}" > ${PAKETPATH}/${listeb// /_}
#               echo "" >> ${PAKETPATH}/${listeb// /_}
#       fi
        echo ${line##*"  "} >> ${PAKETPATH}/${listeb// /_}
        echo "Paketliste -- ${PAKETPATH}/${listeb// /_} -- wurde angelegt "
    ;;
#    "- [ ]")
#       if [[ ! -f ${PAKETPATH}/${listeb// /_} ]]; then 
#               echo "##  Paketliste erstellt - ${DATUM}" > ${PAKETPATH}/${listeb// /_}
#               echo "" >> ${PAKETPATH}/${listeb// /_}
#       fi
#       echo "# ${line##*"  "}" >> ${PAKETPATH}/${listeb// /_}
#    ;;
    *)
#       echo " Unbekannt "
    ;;  
    esac

    done < ${PAKETLISTE}
    echo "Packetlisten erstellen beendet. "
}

###################
# Hauptfunktion
#

test_paketpath

# teste ob paketliste ARGUMENTE hat, wenn nein lösche *.list.* und verwende die default Liste (FSFW_UNI_Stick_-_Paketliste.md) ,

if    [[ -z "$@" ]]; then
        # wenn ja --> Paketlisten einlesen
        PAKETLISTE=${DEFAULT_PAKETLISTE}
        echo " ${PAKETLISTE} wurde ausgewählt "
        del_paketlist
        create_paketlist
    else
        # Sollen vorhandene Paketlisten gelöscht werden ?
        echo " $@ wurde ausgewählt" 
                echo " Es sollen neue Packetlisten generiert werden ! "
                echo " Möchten Sie alle vorhandenen Paketlisten vorher löschen ? "
                echo " Geben sie >> y << ein und die Eingabetaste. "
                echo " "
                echo " Die vorhanden Pakeklisten erweitern - mit jeder anderen Taste. "
                read NEUE_LISTEN
                if [ "$NEUE_LISTEN" == 'y' ]; then
                    echo " Listen löschen "
                    del_paketlist
                fi
        for paketliste in $@
            do
            PAKETLISTE=${paketliste}
            # überprüfe ob Paketliste existiert, sonst Fehlermeldung
            test_datei
            # Paketlisten generieren
            create_paketlist
        done

        
fi


echo "##############################"
echo " "

echo "Paketlisten-Erstellung fertig."



# TODO: Extra Paket-Installation, Doku bauen und und ins Image laden --> separate Skripte
#      - Skript zum Bauen des FSFW-Uni-Sticks erstellen 

echo "Extra Paket-Installation für packages.chroot vorbereiten."

# cd ../manual-installed-packages

# Pakete download

qucs="qucs_0.0.18-2_amd64.deb"

# TODO: prüfen ob Paket zur installation ausgewäht ist  ( "- :+1: :x:  ")
#	Paket möglichst direkt aus der "FSFW-Uni-Stick_-_Paketliste.md" extrahieren

if [ -e config/packages.chroot/${qucs} ];
then

    echo "qucs gefunden"
else
    ${DOWNLOAD} https://launchpad.net/~qucs/+archive/ubuntu/qucs/+files/qucs_0.0.18-2_amd64.deb -O config/packages.chroot/${qucs}
fi

#cp -vR ./* ${ORIGPATH}/config/includes.chroot/home/user/aux-files/manual-installed-packages/

echo "Fertig - Extra Paket-Installation für packages.chroot vorbereiten."


echo " "
echo "Doku bauen und verteilen"


ORIGPATH=`pwd`

cd ../doc/src/

echo `pwd`

for f in *.md ;
    do

    TARGETFILE="../html/${f%%.md}.html"

# TODO: Fehler! fals Paket pandoc nicht installiert ist -- Programmverfügbarkeit vorher testen
    cmd="pandoc --standalone --template $ORIGPATH/../doc/build-script/fsfw-template.html ${f} -o $TARGETFILE"

    # for debugging:
    # echo $cmd
    eval $cmd


    # in the markdown docs there are markdown link targets (to play nicely with github)
    # now its time to convert them

    perl -p -i -e 's/\.md">/\.html">/g' $TARGETFILE
    
    echo "Datei geschrieben:" $TARGETFILE
done

# TODO: *.hlml  --> ../../FSFW-Uni-Stick/config/includes.chroot/var/www/
cp -vR ../html/* ../../FSFW-Uni-Stick/config/includes.chroot/home/user/aux-files/home-dir/FSFW-Material/stick-doku/

cd $ORIGPATH

echo "Doku-Erstellung und Verteilung fertig."

