#!/bin/sh

#set -e

Remove_persistence_prepare ()
{
	for _PARAMETER in ${LIVE_BOOT_CMDLINE}
	do
		case "${_PARAMETER}" in
			live-boot.persistence-remove=*|persistence-remove=*)
				LIVE_PERSISTENCE_REMOVE="${_PARAMETER#*persistence-remove=}"
				;;

			live-boot.persistence-remove|persistence-remove)
				LIVE_PERSISTENCE_REMOVE="true"
				;;
		esac
	done
}

Remove_persistence ()
{
	[ -z "${LIVE_PERSISTENCE_REMOVE}" ] && return 0

	local custom_mounts
	custom_mounts=${1}

	# EXAMPLE entries from get_custom_mounts()
	# with persistence-storage = { filesystem | file | directory }

	# filesystem:
	# device	source					dest		options
	# /dev/vda3	/run/live/persistence/vda3/var/lib	/root/var/lib	union

	# file:
	# device	source				dest	options
	# /dev/loop2	/run/live/persistence/loop2	/root	union

	# directory:
	# device					source							dest		options
	# /run/live/persistence/vda2//linux-userdata/	/run/live/persistence/vda2/linux-userdata/userdata	/root/home	bind,source=userdata

	while read device source dest options # < ${custom_mounts}
	do
		BASENAME=$(basename "${device}")
		REMOVE="false"

		if [ -d "${device}" ]
		then
			# directory:	label = directory name
			LABEL=${BASENAME}
			TYPE="directory"
		elif echo "${device}" | grep -q "^/dev/loop" && [ -e /sys/block/${BASENAME}/loop/backing_file ]
		then
			# file:		label = loop backing_file name
			TYPE="file (loop device)"
			LABEL=$(basename $(cat /sys/block/${BASENAME}/loop/backing_file))
		elif [ -b "${device}" ]
		then
			# filesystem:	label = LABEL (dos partition table) or PART_ENTRY_NAME (gpt)
			TYPE="filesystem"

			# partly taken from probe_for_gpt_name / probe_for_fs_label
			gpt_dev="${device}"
			if is_active_luks_mapping ${device}
			then
				# if $device is an opened luks device, we need to check
				# GPT stuff on the backing device
				gpt_dev=$(get_luks_backing_device "${device}")
			fi

			if is_gpt_device ${gpt_dev}
			then
				LABEL=$(get_gpt_name ${gpt_dev})
			else
				LABEL=$(blkid -s LABEL -o value $device 2>/dev/null)
			fi
		fi

		# data removal from all persistence volumes ? ..
		if [ "${LIVE_PERSISTENCE_REMOVE}" = "true" ]
		then
			REMOVE="true"
		else
			# .. or match only explicitly given labels
			for REMOVE_LABEL in $(echo ${LIVE_PERSISTENCE_REMOVE} | sed -e 's/,/ /g')
			do
				[ "${REMOVE_LABEL}" = "${LABEL}" ] && REMOVE="true"
			done
		fi

		if [ "${REMOVE}" = "true" ]
		then
			# remove /root prefix to destination paths, annotating rootfs special case
			dest=${dest#/root}
			dest=${dest:-rootfs /}

			SIZE=$(numfmt --to=iec-i --format '%.1f' $(find "${source}" -mindepth 1 -not -path "${source}/persistence.conf" -type f -printf '%s\n' | awk '{size += $1} END {print 0 + size}'))
			# specify find minimum depth = 1 to not match and remove ${source} itself
			find "${source}" -mindepth 1 -not -path "${source}/persistence.conf" -delete
			# alternative cmd: find "${source}" -mindepth 1 -maxdepth 1 -not -name 'persistence.conf' -print0 | xargs -0 rm -rf
			echo "reset requested of '${LABEL}' persistence for '${dest}': removed ${SIZE}Byte of data from ${TYPE} mounted at '${source}'"
		fi
	done < ${custom_mounts}
}
