#!/usr/bin/python
"""interactive symlink editor"""

import readline, sys, pprint, os, termcolor

def prompt(hint, default=''):
    """ prompt for user input, with hint and preseeded. """
    readline.set_startup_hook(lambda: readline.insert_text(default))
    readline.set_completer_delims(' \t\n;')
    readline.parse_and_bind('tab: complete')
    #readline.set_completer(path_completer)
    try:
        return raw_input(hint)
    finally:
        # """ always unset startup hook. """
        readline.set_startup_hook()

def exist_color(path):
    """ returns colored path. """
    if os.path.exists(path):
        return termcolor.colored(path, 'cyan')
    else:
        return termcolor.colored(path, 'white', 'on_red')

def main():
    """do it."""
    # pprint.pprint(sys.argv[1:])
    link = os.path.abspath(sys.argv[1])
    if os.path.islink(link):
        oldtarget = os.readlink(link)
        print("Editing symbolic link '" + exist_color(link) + "'")
        newtarget = prompt('link target: ', oldtarget)
        if oldtarget != newtarget:
            os.unlink(link)
            os.symlink(newtarget, link)
            print("symbolic link '" + exist_color(link) + "' target changed from '" + exist_color(oldtarget) + "' to '" + exist_color(newtarget) + "'")
        else:
            print("Link not changed.")

if __name__ == '__main__':
    main()
