# a nicer locate that sends it's files to ls -lah, with colors
bind-key a command-prompt -p "allilocate (* = wildcard):" "split-window -p 60 'source /etc/profile.d/less-termcaps.sh && eval $(dircolors -b /etc/DIR_COLORS) && locate -0i \"*%%*\" | xargs -0r ls -lahd --color=always --time-style=+\"%a %F %R\"|& less -SRiM~ --shift 1 -PM\"locate -i %1: ?f%%f .?n?m(file %%i of %%m) ..?ltlines %%lt-%%lb?L/%%L.:byte %%bB?s/%%s. .?e(END) ?x- Next\: %%x.:?pB%%pB\%..%%t\"'"

# 
bind-key M command-prompt -p "info:" "split-window -p 90 'pinfo %%'"
#bind-key i command-prompt -p "investigate:" "split-window -p 90 'f=%1; [ -f \"${f}\" ] || f=$(which \"${f}\" || { type \"${f}\" >&2 && false; }) && lstrail \"${f}\" && color green && mimetype -ab \"${f}\" && color off && [ -f \"${f}\" ] && { read -sn1 -p \"[e]dit or e[x]ecute file? \" res && case \"$res\" in e) vim \"${f}\"; echo;; x) mimeopen -d \"${f}\";; esac }'"
bind-key o display-message "#{pane_start_command}"
bind-key d command-prompt -p "dict:" "new-window -n 'dict(%1)' 'dict.pl \"%1\" 2>&1|less -SRiM~ --shift 1'"
bind-key E command-prompt -p "dlocate search:" "split-window -p 80 'dlocate %1|grep --color=always -- "%1"|less -SRiM~'"
bind-key e command-prompt -p "dpkg-info:" "split-window -p 80 'dpkg-info %%'"
bind-key m command-prompt -p "man:" "split-window -c '#{pane_current_path}' -p 90 'source /etc/profile.d/less-termcaps.sh && LESS=\"-SRiMJj.2~ --shift 5\" man %% || read -n1'"
bind-key j command-prompt -p "vim:" "new-window -c '#{pane_current_path}' 'stty -ixon -ixoff && vim %%'"
bind-key J command-prompt -p "vim-:" "split-window -v -c '#{pane_current_path}' 'stty -ixon -ixoff && vim %%'"
bind-key s command-prompt -p "split-window:" "split-window -v -c '#{pane_current_path}' 'tmux-pane-wrap -v \"%1\"; tmux-pane-respawn-prompt'"
bind-key S command-prompt -p "split-window:" "split-window -h -c '#{pane_current_path}' 'tmux-pane-wrap -v \"%1\"; tmux-pane-respawn-prompt'"
bind-key n command-prompt -p "new-window:" "new-window -c '#{pane_current_path}' -n '%1' 'tmux-pane-wrap -v \"%1\"; tmux-pane-respawn-prompt'"
bind-key b command-prompt -p 'ranger:' 'new-window -c "#{pane_current_path}" "tmux-pane-wrap ranger %1"'
bind-key B split-window -c '#{pane_current_path}' 'tmux-pane-wrap ranger' # \; select-pane -T ranger \; set-option remain-on-exit on
bind-key x command-prompt -p "surfraw,term" -I "google -l" "split-window -c '#{pane_current_path}' -p 90 'surfraw %% "%%\"'"
bind-key g command-prompt -p "google:" "split-window -c '#{pane_current_path}' -p 90 'elinks -no-home -no-connect \"g %%\"'"
#bind-key C-N split-window -vp 90 ncmpcpp
bind-key F2 command-prompt -I "#W" "rename-window '%%'"
bind-key 9 split-window "tmux-pane-wrap -v handy-sync; tmux-pane-respawn-prompt"
bind-key h command-prompt -p "bash history search:" "split-window -v -c '#{pane_current_path}' 'tmux-pane-wrap \"histsearch %%|less\"'"
bind-key H new-window  -c '#{pane_current_path}' "bash-history-spawn"
bind-key L new-window -c '#{pane_current_path}' "tmux-pane-wrap -v 'git roll'; tmux-pane-respawn-prompt"
# bind-key i command-prompt -p "imv:" "split-window -p 10 -c '#{pane_current_path}' 'imv \"%%\"'"
# bind-key i command-prompt -p "icp:" "split-window -p 10 -c '#{pane_current_path}' 'tmux-pane-wrap icp -av \"%%\"'"

bind-key C-s split-window -l 8 "CACA_DRIVER=ncurses faketime 00:00:00 cacaclock"

bind-key C-g split-window -p 80 -c "#{pane_current_path}" "tmux-pane-wrap -v git pull --verbose --progress; tmux-pane-respawn-prompt"
bind-key M-g split-window -p 80 -c "#{pane_current_path}" "tmux-pane-wrap -v git fetch --verbose --all --prune --progress; tmux-pane-respawn-prompt"

